var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [ModernBert]","category":"page"},{"location":"api/#ModernBert.ModernBertEncoder","page":"API","title":"ModernBert.ModernBertEncoder","text":"ModernBertEncoder\n\nA wrapper around ModernBertTokenizer that provides encode/decode functionality compatible with BytePairEncoding.jl. Special tokens are automatically handled during encoding and decoding.\n\nExamples\n\njulia> encoder = ModernBertEncoder(\"data/tokenizer.json\")\nModernBertEncoder(...)\n\njulia> encode(encoder, \"hello world\")\n4-element Vector{Int64}:\n 50280\n 25521\n  1533\n 50281\n\njulia> tokenize(encoder, \"hello world\")\n4-element Vector{String}:\n \"[CLS]\"\n \"hello\"\n \"Ġworld\"\n \"[SEP]\"\n\njulia> decode(encoder, encode(encoder, \"hello world\"))\n4-element Vector{String}:\n \"[CLS]\"\n \"hello\"\n \"Ġworld\"\n \"[SEP]\"\n\n\n\n\n\n","category":"type"},{"location":"api/#ModernBert.ModernBertEncoder-Tuple{String}","page":"API","title":"ModernBert.ModernBertEncoder","text":"ModernBertEncoder(config_path::String)\n\nCreate a ModernBertEncoder from a configuration file path.\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.download_config_files-Tuple{String, String}","page":"API","title":"ModernBert.download_config_files","text":"download_config_files(repo_url::String, target_dir::String)\n\nDownload configuration files from HuggingFace repository. Returns the target directory path where files were downloaded.\n\nThrows:\n\nArgumentError if the URL is invalid\nDownloads.RequestError if any file fails to download\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.download_model","page":"API","title":"ModernBert.download_model","text":"download_model(repo_url::String, target_dir::String=\"model\", model_name::String=\"model.onnx\")\n\nDownload model and configuration files from HuggingFace repository.\n\nArguments\n\nrepo_url::String: URL of the HuggingFace repository (e.g. \"https://huggingface.co/answerdotai/ModernBERT-large\")\ntarget_dir::String: Local directory to save files (default: \"model\")\nmodel_name::String: Name of the model file to download (default: \"model.onnx\")\n\nReturns\n\nThe target directory path where files were downloaded.\n\nThrows\n\nArgumentError if the URL is invalid\nDownloads.RequestError if any file fails to download\n\nExamples\n\ndownload_model(\"https://huggingface.co/answerdotai/ModernBERT-large\",\"model\",\"model.onnx\")\n\n\n\n\n\n","category":"function"},{"location":"api/#ModernBert.parse_repo_id-Tuple{String}","page":"API","title":"ModernBert.parse_repo_id","text":"parse_repo_id(url::String)\n\nExtract repository ID from HuggingFace URL. Examples:\n\nparse_repo_id(\"https://huggingface.co/answerdotai/ModernBERT-large\") # returns \"answerdotai/ModernBERT-large\"\n\n\n\n\n\n","category":"method"},{"location":"api/#TextEncodeBase.encode-Tuple{ModernBertEncoder, AbstractString}","page":"API","title":"TextEncodeBase.encode","text":"encode(encoder::ModernBertEncoder, text::AbstractString)\n\nEncode text into token IDs. If addspecialtokens is true, adds [CLS] and [SEP] token IDs.\n\n\n\n\n\n","category":"method"},{"location":"api/#TextEncodeBase.encode-Tuple{ModernBertEncoder, AbstractVector{<:AbstractString}}","page":"API","title":"TextEncodeBase.encode","text":"TextEncodeBase.encode(\n    encoder::ModernBertEncoder,\n    texts::AbstractVector{<:AbstractString})\n\nEncode a vector of texts into token IDs. If padtomax is true, all sequences will be padded to the length of the longest sequence using the [PAD] token ID.\n\nReturns a matrix of token IDs where each row represents a text sequence.\n\n\n\n\n\n","category":"method"},{"location":"api/#TextEncodeBase.tokenize-Tuple{ModernBertEncoder, String}","page":"API","title":"TextEncodeBase.tokenize","text":"tokenize(encoder::ModernBertEncoder, text::String; add_special_tokens::Bool=true)\n\nTokenize text into tokens. If addspecialtokens is true, adds [CLS] and [SEP] tokens.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ModernBert","category":"page"},{"location":"#ModernBert","page":"Home","title":"ModernBert","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ModernBert.","category":"page"}]
}
