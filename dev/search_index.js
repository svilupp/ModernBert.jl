var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [ModernBert]","category":"page"},{"location":"api/#ModernBert.BPETokenizer","page":"API","title":"ModernBert.BPETokenizer","text":"BPETokenizer\n\nA BPE (Byte-Pair Encoding) tokenizer that splits text into subword units based on learned merge rules.\n\nFields\n\nvocab::Dict{String,Int}: Mapping from tokens to their IDs (0-based for Python compatibility)\nmerges::Vector{Tuple{String,String}}: Ordered list of BPE merge rules\nmerge_index::Dict{Tuple{String,String},Int}: Index for BPE merge rules\nspecial_tokens::Dict{String,Int}: Special token mapping (e.g., [CLS], [SEP], etc.)\nspecial_token_properties::Dict{String,NamedTuple}: Properties for special tokens (lstrip, rstrip, etc.)\ncache::Dict{String,Vector{String}}: Cache for already tokenized words\nprev_token::String: The previous token\nadd_prefix_space::Bool: Whether to add a prefix space\ntrunc::Union{Nothing, Int}: The truncation length. Defaults to 8192 tokens.\n\n\n\n\n\n","category":"type"},{"location":"api/#ModernBert.download_config_files-Tuple{String, String}","page":"API","title":"ModernBert.download_config_files","text":"download_config_files(repo_url::String, target_dir::String)\n\nDownload configuration files from HuggingFace repository. Returns the target directory path where files were downloaded.\n\nThrows:\n\nArgumentError if the URL is invalid\nDownloads.RequestError if any file fails to download\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.encode-Tuple{BPETokenizer, String}","page":"API","title":"ModernBert.encode","text":"encode(tokenizer::BPETokenizer, text::String; add_special_tokens::Bool = true)\n\nEncodes the text and returns the token IDs, token type IDs, and attention mask.\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.get_pairs-Tuple{Vector{String}}","page":"API","title":"ModernBert.get_pairs","text":"get_pairs(word::Vector{String})\n\nGet all possible pairs and longer sequences in a word represented as tokens. Returns pairs that could potentially be merged based on the vocabulary.\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.load_tokenizer-Tuple{String}","page":"API","title":"ModernBert.load_tokenizer","text":"load_tokenizer(config_path::String)\n\nLoad a BPE tokenizer configuration from a JSON file.\n\nArguments\n\nconfig_path::String: Path to the tokenizer.json configuration file\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.parse_repo_id-Tuple{String}","page":"API","title":"ModernBert.parse_repo_id","text":"parse_repo_id(url::String)\n\nExtract repository ID from HuggingFace URL. Examples:\n\nparse_repo_id(\"https://huggingface.co/answerdotai/ModernBERT-large\") # returns \"answerdotai/ModernBERT-large\"\n\n\n\n\n\n","category":"method"},{"location":"api/#ModernBert.tokenize-Tuple{BPETokenizer, AbstractString}","page":"API","title":"ModernBert.tokenize","text":"tokenize(tokenizer::BPETokenizer, text::AbstractString;\n    token_ids::Bool = false, add_special_tokens::Bool = true,\n    add_prefix_space::Bool = tokenizer.add_prefix_space)\n\nFunction call overloading for BPETokenizer to make it callable directly. Tokenizes text using the BPE algorithm.\n\nArguments\n\ntext::AbstractString: Input text to tokenize\ntoken_ids::Bool=false: If true, return token IDs instead of tokens\nadd_special_tokens::Bool=true: Whether to add special tokens\nadd_prefix_space::Bool=false: Whether the first token should have a word boundary marker\n\nReturns\n\nVector of tokens or token IDs\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ModernBert","category":"page"},{"location":"#ModernBert","page":"Home","title":"ModernBert","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ModernBert.","category":"page"}]
}
